{"version":3,"sources":["scripts/node_modules/browser-pack/_prelude.js","scripts/src/scripts/basic-types.ts","scripts/src/scripts/hello.ts","scripts/src/scripts/main.ts"],"names":[],"mappings":"AAAA;;ACAA;;;;;;AAKA;AACA,IAAI,OAAc,cAAlB;AAEA;AACA,IAAI,MAAa,EAAjB;AACA,IAAI,SAAgB,IAApB;AAEA;AACA,IAAI,aAAqB,IAAzB;AAEA;AACA,IAAI,aAAsB,CAAC,CAAD,EAAG,CAAH,EAAK,EAAL,CAA1B;AACA,IAAI,YAA0B,CAAC,UAAD,EAAY,UAAZ,EAAuB,OAAvB,CAA9B;AAEA;AACA;AACA,IAAI,kBAAJ;AACA;AACA,YAAY,CAAC,GAAD,EAAK,UAAL,CAAZ;AAEA;AACA,IAAK,MAAL;AAAA,CAAA,UAAK,MAAL,EAAW;AAAE,WAAA,OAAA,SAAA,IAAA,CAAA,IAAA,SAAA;AAAc,WAAA,OAAA,cAAA,IAAA,CAAA,IAAA,cAAA;AAAe,WAAA,OAAA,WAAA,IAAA,CAAA,IAAA,WAAA;AAAY,WAAA,OAAA,YAAA,IAAA,CAAA,IAAA,YAAA;AAAa,CAAnE,EAAK,WAAA,SAAM,EAAN,CAAL;AAAmE;AACnE,IAAI,eAAe,OAAO,OAA1B;AACA,IAAI,aAAa,OAAO,CAAP,CAAjB;AAEA;AACA,IAAI,UAAc,KAAlB;AACA,UAAU,EAAV;AACA,UAAU,wBAAV;AAEA;AACA,SAAS,YAAT,GAAqB;AACjB,UAAM,6BAAN;AACH;AAED;AACA,IAAI,SAAa,YAAjB;AACA,IAAI,eAA+B,OAAQ,MAA3C;AACA,IAAI,gBAAwB,OAAkB,MAA9C;AAGA,SAAgB,SAAhB,GAAyB;AACrB,QAAI,gBAAiB,UAAD,gCAAyC,SAAzC,2BAAwE,UAAU,CAAV,CAAxE,YAA2F,UAAU,CAAV,CAA3F,WAApB;AACA,WAAO,UAAQ,IAAR,UAAiB,GAAjB,6BAA4C,MAA5C,6CAC0B,UAD1B,UAC0C,aAD1C,iBAEQ,OAAO,CAAP,CAFR,aAEyB,UAFzB,gCAE8D,YAF9D,sBAAP;AAGH;AALD,QAAA,SAAA,GAAA,SAAA;;;;;;AC9CA,SAAgB,QAAhB,CAAyB,IAAzB,EAAoC;AACnC,sDAAgD,IAAhD;AACA;AAFD,QAAA,QAAA,GAAA,QAAA;;;;;;ACAA,IAAA,UAAA,QAAA,SAAA,CAAA;AACA,IAAA,gBAAA,QAAA,eAAA,CAAA;AAEA,SAAS,SAAT,CAAoB,OAApB,EAAmC,IAAnC,EAA8C;AAC1C,QAAM,MAAM,SAAS,cAAT,CAAwB,OAAxB,CAAZ;AACA,QAAI,SAAJ,GAAgB,QAAA,QAAA,CAAS,IAAT,IAAiB,YAAjB,GAAgC,cAAA,SAAA,EAAhD;AACH;AAED,UAAU,OAAV,EAAkB,KAAlB","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * Created by Naveen on 5/29/2016.\n * In this file I will demonstrate all the basic types available in TypeScript.\n */\n\n//String\nlet name:string = \"Naveen Kumar\";\n\n//Number\nlet age:number = 29;\nlet weight:number = 72.2;\n\n// Boolean\nlet likeMovies:boolean = true;\n\n//Array\nlet favNumbers:number[] = [3,9,18];\nlet favMovies:Array<string> = [\"3 Idiots\",\"Avengers\",\"X-Men\"];\n\n// Tuple - where type of fixed number of array is known,but need not to be same;\n//Declare a tuple like this\nlet myRatings :[number,string];\n//Initialize it\nmyRatings = [9.2,\"3 Idiots\"];\n\n//Enum\nenum Sports {'Cricket' = 1,'Table Tennis','Vollyball','Basketball'};\nlet cricketIndex = Sports.Cricket;\nlet secondGame = Sports[2];\n\n//Any - when you are not sure about its type.\nlet notSure:any = false;\nnotSure = 10;\nnotSure = \"Really I am not sure!!\";\n\n// Void - mostly seen as return type of a function.\nfunction alertMessage() :void {\n    alert(\"Its an alert. Move fast !!!\")\n}\n\n// Type assertions - when user know about type of a variable more than TS.\nlet newVal:any = \"New String\";\nlet newValLength:number = (<string>newVal).length;\nlet newValLength2:number = (newVal as string).length;\n\n\nexport function printVars () {\n    var moviesSummary = (likeMovies)? ` My favorite movies are ${favMovies}. I gave rating of ${myRatings[0]} to ${myRatings[1]}.`:``\n    return `I am ${name}, ${age} years old. I weight ${weight} kgs.` +\n        `  My favorite numbers are ${favNumbers}.` + moviesSummary+\n        ` I play ${Sports[3]} and ${secondGame}, but cricket is always ${cricketIndex}st choice for me`;\n}","export function sayHello(name:string) {\n\treturn `<h1>Welcome to matrix world.....<br/> ${name} welcomes you..!!</h1>`;\n}","import {sayHello} from './hello';\nimport {printVars} from './basic-types';\n\nfunction showHello (divName:string,name:string){\n    const ele = document.getElementById(divName);\n    ele.innerHTML = sayHello(name) + \"<br/><br/>\" + printVars();\n}\n\nshowHello(\"hello\",\"Neo\");"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvc2NyaXB0cy9iYXNpYy10eXBlcy50cyIsInNyYy9zY3JpcHRzL2hlbGxvLnRzIiwic3JjL3NjcmlwdHMvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQTs7Ozs7O0FBS0E7QUFDQSxJQUFJLE9BQWMsY0FBbEI7QUFFQTtBQUNBLElBQUksTUFBYSxFQUFqQjtBQUNBLElBQUksU0FBZ0IsSUFBcEI7QUFFQTtBQUNBLElBQUksYUFBcUIsSUFBekI7QUFFQTtBQUNBLElBQUksYUFBc0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLEVBQUwsQ0FBMUI7QUFDQSxJQUFJLFlBQTBCLENBQUMsVUFBRCxFQUFZLFVBQVosRUFBdUIsT0FBdkIsQ0FBOUI7QUFFQTtBQUNBO0FBQ0EsSUFBSSxrQkFBSjtBQUNBO0FBQ0EsWUFBWSxDQUFDLEdBQUQsRUFBSyxVQUFMLENBQVo7QUFFQTtBQUNBLElBQUssTUFBTDtBQUFBLENBQUEsVUFBSyxNQUFMLEVBQVc7QUFBRSxXQUFBLE9BQUEsU0FBQSxJQUFBLENBQUEsSUFBQSxTQUFBO0FBQWMsV0FBQSxPQUFBLGNBQUEsSUFBQSxDQUFBLElBQUEsY0FBQTtBQUFlLFdBQUEsT0FBQSxXQUFBLElBQUEsQ0FBQSxJQUFBLFdBQUE7QUFBWSxXQUFBLE9BQUEsWUFBQSxJQUFBLENBQUEsSUFBQSxZQUFBO0FBQWEsQ0FBbkUsRUFBSyxXQUFBLFNBQU0sRUFBTixDQUFMO0FBQW1FO0FBQ25FLElBQUksZUFBZSxPQUFPLE9BQTFCO0FBQ0EsSUFBSSxhQUFhLE9BQU8sQ0FBUCxDQUFqQjtBQUVBO0FBQ0EsSUFBSSxVQUFjLEtBQWxCO0FBQ0EsVUFBVSxFQUFWO0FBQ0EsVUFBVSx3QkFBVjtBQUVBO0FBQ0EsU0FBUyxZQUFULEdBQXFCO0FBQ2pCLFVBQU0sNkJBQU47QUFDSDtBQUVEO0FBQ0EsSUFBSSxTQUFhLFlBQWpCO0FBQ0EsSUFBSSxlQUErQixPQUFRLE1BQTNDO0FBQ0EsSUFBSSxnQkFBd0IsT0FBa0IsTUFBOUM7QUFHQSxTQUFnQixTQUFoQixHQUF5QjtBQUNyQixRQUFJLGdCQUFpQixVQUFELGdDQUF5QyxTQUF6QywyQkFBd0UsVUFBVSxDQUFWLENBQXhFLFlBQTJGLFVBQVUsQ0FBVixDQUEzRixXQUFwQjtBQUNBLFdBQU8sVUFBUSxJQUFSLFVBQWlCLEdBQWpCLDZCQUE0QyxNQUE1Qyw2Q0FDMEIsVUFEMUIsVUFDMEMsYUFEMUMsaUJBRVEsT0FBTyxDQUFQLENBRlIsYUFFeUIsVUFGekIsZ0NBRThELFlBRjlELHNCQUFQO0FBR0g7QUFMRCxRQUFBLFNBQUEsR0FBQSxTQUFBOzs7Ozs7QUM5Q0EsU0FBZ0IsUUFBaEIsQ0FBeUIsSUFBekIsRUFBb0M7QUFDbkMsc0RBQWdELElBQWhEO0FBQ0E7QUFGRCxRQUFBLFFBQUEsR0FBQSxRQUFBOzs7Ozs7QUNBQSxJQUFBLFVBQUEsUUFBQSxTQUFBLENBQUE7QUFDQSxJQUFBLGdCQUFBLFFBQUEsZUFBQSxDQUFBO0FBRUEsU0FBUyxTQUFULENBQW9CLE9BQXBCLEVBQW1DLElBQW5DLEVBQThDO0FBQzFDLFFBQU0sTUFBTSxTQUFTLGNBQVQsQ0FBd0IsT0FBeEIsQ0FBWjtBQUNBLFFBQUksU0FBSixHQUFnQixRQUFBLFFBQUEsQ0FBUyxJQUFULElBQWlCLFlBQWpCLEdBQWdDLGNBQUEsU0FBQSxFQUFoRDtBQUNIO0FBRUQsVUFBVSxPQUFWLEVBQWtCLEtBQWxCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IE5hdmVlbiBvbiA1LzI5LzIwMTYuXG4gKiBJbiB0aGlzIGZpbGUgSSB3aWxsIGRlbW9uc3RyYXRlIGFsbCB0aGUgYmFzaWMgdHlwZXMgYXZhaWxhYmxlIGluIFR5cGVTY3JpcHQuXG4gKi9cblxuLy9TdHJpbmdcbmxldCBuYW1lOnN0cmluZyA9IFwiTmF2ZWVuIEt1bWFyXCI7XG5cbi8vTnVtYmVyXG5sZXQgYWdlOm51bWJlciA9IDI5O1xubGV0IHdlaWdodDpudW1iZXIgPSA3Mi4yO1xuXG4vLyBCb29sZWFuXG5sZXQgbGlrZU1vdmllczpib29sZWFuID0gdHJ1ZTtcblxuLy9BcnJheVxubGV0IGZhdk51bWJlcnM6bnVtYmVyW10gPSBbMyw5LDE4XTtcbmxldCBmYXZNb3ZpZXM6QXJyYXk8c3RyaW5nPiA9IFtcIjMgSWRpb3RzXCIsXCJBdmVuZ2Vyc1wiLFwiWC1NZW5cIl07XG5cbi8vIFR1cGxlIC0gd2hlcmUgdHlwZSBvZiBmaXhlZCBudW1iZXIgb2YgYXJyYXkgaXMga25vd24sYnV0IG5lZWQgbm90IHRvIGJlIHNhbWU7XG4vL0RlY2xhcmUgYSB0dXBsZSBsaWtlIHRoaXNcbmxldCBteVJhdGluZ3MgOltudW1iZXIsc3RyaW5nXTtcbi8vSW5pdGlhbGl6ZSBpdFxubXlSYXRpbmdzID0gWzkuMixcIjMgSWRpb3RzXCJdO1xuXG4vL0VudW1cbmVudW0gU3BvcnRzIHsnQ3JpY2tldCcgPSAxLCdUYWJsZSBUZW5uaXMnLCdWb2xseWJhbGwnLCdCYXNrZXRiYWxsJ307XG5sZXQgY3JpY2tldEluZGV4ID0gU3BvcnRzLkNyaWNrZXQ7XG5sZXQgc2Vjb25kR2FtZSA9IFNwb3J0c1syXTtcblxuLy9BbnkgLSB3aGVuIHlvdSBhcmUgbm90IHN1cmUgYWJvdXQgaXRzIHR5cGUuXG5sZXQgbm90U3VyZTphbnkgPSBmYWxzZTtcbm5vdFN1cmUgPSAxMDtcbm5vdFN1cmUgPSBcIlJlYWxseSBJIGFtIG5vdCBzdXJlISFcIjtcblxuLy8gVm9pZCAtIG1vc3RseSBzZWVuIGFzIHJldHVybiB0eXBlIG9mIGEgZnVuY3Rpb24uXG5mdW5jdGlvbiBhbGVydE1lc3NhZ2UoKSA6dm9pZCB7XG4gICAgYWxlcnQoXCJJdHMgYW4gYWxlcnQuIE1vdmUgZmFzdCAhISFcIilcbn1cblxuLy8gVHlwZSBhc3NlcnRpb25zIC0gd2hlbiB1c2VyIGtub3cgYWJvdXQgdHlwZSBvZiBhIHZhcmlhYmxlIG1vcmUgdGhhbiBUUy5cbmxldCBuZXdWYWw6YW55ID0gXCJOZXcgU3RyaW5nXCI7XG5sZXQgbmV3VmFsTGVuZ3RoOm51bWJlciA9ICg8c3RyaW5nPm5ld1ZhbCkubGVuZ3RoO1xubGV0IG5ld1ZhbExlbmd0aDI6bnVtYmVyID0gKG5ld1ZhbCBhcyBzdHJpbmcpLmxlbmd0aDtcblxuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRWYXJzICgpIHtcbiAgICB2YXIgbW92aWVzU3VtbWFyeSA9IChsaWtlTW92aWVzKT8gYCBNeSBmYXZvcml0ZSBtb3ZpZXMgYXJlICR7ZmF2TW92aWVzfS4gSSBnYXZlIHJhdGluZyBvZiAke215UmF0aW5nc1swXX0gdG8gJHtteVJhdGluZ3NbMV19LmA6YGBcbiAgICByZXR1cm4gYEkgYW0gJHtuYW1lfSwgJHthZ2V9IHllYXJzIG9sZC4gSSB3ZWlnaHQgJHt3ZWlnaHR9IGtncy5gICtcbiAgICAgICAgYCAgTXkgZmF2b3JpdGUgbnVtYmVycyBhcmUgJHtmYXZOdW1iZXJzfS5gICsgbW92aWVzU3VtbWFyeStcbiAgICAgICAgYCBJIHBsYXkgJHtTcG9ydHNbM119IGFuZCAke3NlY29uZEdhbWV9LCBidXQgY3JpY2tldCBpcyBhbHdheXMgJHtjcmlja2V0SW5kZXh9c3QgY2hvaWNlIGZvciBtZWA7XG59IiwiZXhwb3J0IGZ1bmN0aW9uIHNheUhlbGxvKG5hbWU6c3RyaW5nKSB7XG5cdHJldHVybiBgPGgxPldlbGNvbWUgdG8gbWF0cml4IHdvcmxkLi4uLi48YnIvPiAke25hbWV9IHdlbGNvbWVzIHlvdS4uISE8L2gxPmA7XG59IiwiaW1wb3J0IHtzYXlIZWxsb30gZnJvbSAnLi9oZWxsbyc7XG5pbXBvcnQge3ByaW50VmFyc30gZnJvbSAnLi9iYXNpYy10eXBlcyc7XG5cbmZ1bmN0aW9uIHNob3dIZWxsbyAoZGl2TmFtZTpzdHJpbmcsbmFtZTpzdHJpbmcpe1xuICAgIGNvbnN0IGVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdk5hbWUpO1xuICAgIGVsZS5pbm5lckhUTUwgPSBzYXlIZWxsbyhuYW1lKSArIFwiPGJyLz48YnIvPlwiICsgcHJpbnRWYXJzKCk7XG59XG5cbnNob3dIZWxsbyhcImhlbGxvXCIsXCJOZW9cIik7Il19"}